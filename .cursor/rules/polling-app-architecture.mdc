---
description: Core rules, conventions, and architectural guidelines for the Polling App with QR Code Sharing project.
globs:
alwaysApply: true
---

## Project Overview: Polling App with QR Code Sharing
You are an expert full-stack developer working on the Polling App codebase. Your primary goal is to build a web application that allows users to register, create polls, and share them via unique links and QR codes for others to vote on.

Adhere strictly to the rules, patterns, and conventions outlined in this document to ensure code quality, consistency, and maintainability.

## Technology Stack
The project uses the following technologies. Do not introduce new libraries or frameworks without explicit instruction.

- Language: TypeScript
- Main Framework: Next.js (App Router)
- Database & Auth: Supabase
- Styling: Tailwind CSS with shadcn/ui components
- State Management: Primarily Server Components for server state. Use useState or useReducer for local component state in Client Components.
- API Communication: Use Next.js Server Actions for mutations (creating polls, voting). Fetch data in Server Components using the Supabase client.
- Utility Libraries: A library like qrcode.react for generating QR codes.

## Architecture & Code Style

- Directory Structure: Follow the standard Next.js App Router structure.
    - `/app` for routes and pages.
    - `/components/ui` for `shadcn/ui` components.
    - `/components/` for custom, reusable components.
    - `/lib` for Supabase client setup, utility functions, and Server Actions.

- Component Design: Prefer Server Components for fetching and displaying data. Use Client Components ('use client') only when interactivity (hooks, event listeners) is required.
- Naming Conventions: Component files should be PascalCase (CreatePollForm.tsx). Utility and action functions should be camelCase (submitVote.ts).
- Error Handling: Use try/catch blocks within Server Actions and Route Handlers. Use Next.js error.tsx files for handling errors within route segments.
- API Keys & Secrets: Never hardcode secrets. Use environment variables (.env.local) for Supabase URL and keys, accessed via process.env.NEXT_PUBLIC_SUPABASE_URL and process.env.SUPABASE_SECRET_KEY.

## Data Models

### Poll Structure
Each poll must include:
- `id`: Unique identifier (UUID)
- `question`: The poll question (string)
- `options`: Array of poll options with vote counts
- `createdBy`: User ID who created the poll
- `createdAt`: Timestamp of creation
- `expiresAt`: Optional expiration timestamp
- `shareUrl`: Unique shareable URL
- `qrCode`: Generated QR code data (optional)

### Vote Structure
Each vote must include:
- `id`: Unique identifier
- `pollId`: Reference to the poll
- `optionIndex`: Selected option index
- `voterId`: User identifier (can be anonymous)
- `votedAt`: Timestamp of vote

## Routing & Pages Structure

### App Router Structure:
- `/app/page.tsx` - Home page with poll list
- `/app/polls/page.tsx` - All polls listing
- `/app/polls/create/page.tsx` - Create new poll
- `/app/polls/[id]/page.tsx` - Individual poll view and voting
- `/app/polls/[id]/results/page.tsx` - Poll results page
- `/app/api/polls/route.ts` - Poll API endpoints (if needed)
- `/app/api/votes/route.ts` - Voting API endpoints (if needed)

## Code Patterns to Follow

### Form Handling:
- Use react-hook-form with zodResolver for form validation
- Use Server Actions for form submissions
- Handle form states (loading, success, error) appropriately
- Example pattern:
```typescript
// In Server Action
export async function createPoll(formData: FormData) {
  // validation and database logic
}

// In Client Component

  {/* form fields */}

```

### Data Fetching:
- Use Server Components for initial data loading
- Use Supabase client directly in Server Components
- Example pattern:
```typescript
// Server Component
export default async function PollsPage() {
  const { data: polls } = await supabase.from('polls').select('*')
  return 
}
```

### Styling Patterns:
- Use shadcn/ui components as the foundation
- Extend with custom Tailwind classes when needed
- Maintain consistent spacing and typography
- Use proper responsive design patterns

## Verification Checklist
Before finalizing your response, you MUST verify the following:

- Does the code use the Next.js App Router and Server Components for data fetching?
- Are Server Actions used for data mutations (forms)?
- Is the Supabase client used for all database interactions?
- Are shadcn/ui components used for the UI where appropriate?
- Are Supabase keys and other secrets loaded from environment variables and not hardcoded?
- Does the poll structure include all required fields (id, question, options, createdBy, createdAt)?
- Are forms using react-hook-form with proper validation?
- Is the routing structure following the specified pattern?